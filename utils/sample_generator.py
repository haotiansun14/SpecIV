'''
This file contains functions that generate samples from a given distribution,
which is used in the Invariance Learning task.
'''

import torch


def sample_matrix_generator(x, y, idx, num_sample, generator):
    '''
    generating distribution samples from x, y using generator
    param x, y: data
    param idx: index of data points to be sampled
    param num_sample: number of samples to be generated for each data point
    param generator: sample generating function
    '''
    if generator is None:
        return
    
    # sample generating function provided
    # case 1: x, y are sufficient statistics
    # case 2: samples are generated by deforming x, y

    d = x.shape[1]
    n = len(idx)
    
    M_x = torch.zeros(num_sample * n, d)
    M_y = torch.zeros(num_sample * n, 1)

    x_rep = torch.zeros(num_sample * n, d)
    y_rep = torch.zeros(num_sample * n, 1)
    
    rep_idx = torch.zeros(num_sample * n, 1, dtype=torch.long)

    print(f'generating {num_sample} x {n} samples...')
    
    for i in range(n):
        # generate num_sample samples for each data point
        M_x[num_sample * i : num_sample * (i + 1), :] = generator(x[idx[i], :], num_sample)
        M_y[num_sample * i : num_sample * (i + 1), :] = y[idx[i]].repeat(num_sample, 1)
        
        # repeat the data point num_sample times
        x_rep[num_sample * i : num_sample * (i + 1), :] = x[idx[i], :].repeat(num_sample, 1)
        y_rep[num_sample * i : num_sample * (i + 1), :] = M_y[num_sample * i : num_sample * (i + 1)]

        rep_idx[num_sample * i : num_sample * (i + 1), :] = i
        
    return M_x, M_y, x_rep, y_rep, rep_idx

if __name__ == '__main__':
    # test the function
    x = torch.rand((1000, 10))
    y = torch.rand((1000, 1))
    idx = torch.arange(1000)
    num_sample = 50
    generator = lambda x, num_sample: x + 0.05 * torch.randn(num_sample, 1)
    M_x, M_y, x_rep, y_rep, rep_idx = sample_matrix_generator(x, y, idx, num_sample, generator)
    print(f'M_x: {M_x.shape}, M_y: {M_y.shape}, x_rep: {x_rep.shape}, y_rep: {y_rep.shape}, rep_idx: {rep_idx.shape}')
